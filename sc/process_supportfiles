#!/bin/bash

function make_temp_manifest() {
    > /manifest.tmp
}

function add_temp_manifest() {
    if [ $? -eq 0 ] ; then
        state='ok'
    else
        state='failed'
    fi
    echo "${@}:${state}" >> /manifest.tmp 
}

function publish_manifest() {
    mv /manifest.tmp /manifest || exit 1   # hard exit to let host creation fail 
}


# --- MAIN ---

# Set machine id.
echo "${MACHINE_ID}" > /etc/machine-id

# Create temporary manifest.
make_temp_manifest

# Extract files from supportconfig.
if [ -f "${SUPPORTCONFIG}" ] ; then
    supportconfig="${SUPPORTCONFIG}"
    supportconfig_dir="${SUPPORTCONFIG%.*}"
    tar xf "${supportconfig}" || exit 1   # hard exit to let host creation fail
elif [ -d "${SUPPORTCONFIG}" ] ; then
    supportconfig_dir="${SUPPORTCONFIG}"
else
    echo "${SUPPORTCONFIG} is neither file nor directory." >&2
    exit 1
fi
./split-supportconfig "${supportconfig_dir}/env.txt" "${supportconfig_dir}/network.txt" "${supportconfig_dir}/basic-environment.txt" "${supportconfig_dir}/ha.txt" "${supportconfig_dir}/plugin-ha_sap.txt" "${supportconfig_dir}/fs-diskio.txt" || exit 1   # hard exit to let host creation fail 

# Copy files from supportconfig into rootfs.
mkdir /etc/corosync/
rm -f /etc/corosync/corosync.conf /etc/sysconfig/sbd /etc/os-release /etc/fstab /etc/hosts
rm -fr /var/lib/pacemaker /usr/sap
cp -b /rootfs/etc/corosync/corosync.conf /etc/corosync/ ; add_temp_manifest 'corosync.conf'
cp -b /rootfs/etc/sysconfig/sbd /etc/sysconfig/ ; add_temp_manifest 'sysconfig_sbd'
cp -b /rootfs/etc/os-release /etc/ ; add_temp_manifest 'os-release'
cp -r /rootfs/var/lib/pacemaker /var/lib/ ; add_temp_manifest 'pacemaker_files'
cp -r /rootfs/usr/sap /usr/ ; add_temp_manifest 'usr_sap'
cp -r /rootfs/etc/fstab /etc/ ; add_temp_manifest 'fstab'
cp -r /rootfs/etc/hosts /etc/ ; add_temp_manifest 'hosts'

# Extract saptune JSON output.
rm -f /tmp/saptune_status.json /tmp/saptune_note_verify.json /tmp/saptune_note_list.json /tmp/saptune_check.json
sed -n '/^# saptune --format json status$/,/^$/p' "${supportconfig_dir}/plugin-saptune.txt" | grep '^{"$schema"' > /tmp/saptune_status.json
sed -n '/^# saptune --format json note verify$/,/^$/p' "${supportconfig_dir}/plugin-saptune.txt" | grep '^{"$schema"' > /tmp/saptune_note_verify.json
sed -n '/^# saptune --format json note list$/,/^$/p' "${supportconfig_dir}/plugin-saptune.txt" | grep '^{"$schema"' > /tmp/saptune_note_list.json
sed -n '/^# saptune --format json solution list$/,/^$/p' "${supportconfig_dir}/plugin-saptune.txt" | grep '^{"$schema"' > /tmp/saptune_solution_list.json

sed -n '/^# saptune --format json check$/,/^$/p' "${supportconfig_dir}/plugin-saptune.txt" | grep '^{"$schema"' > /tmp/saptune_check.json
test -n "$(cat /tmp/saptune_*)"  ; add_temp_manifest 'saptune'

# Extract sapservices.
rm -f /usr/sap/sapservices
mkdir -p /usr/sap
sed -n '/^# \/usr\/bin\/cat \/usr\/sap\/sapservices$/,/^$/p' "${supportconfig_dir}/plugin-ha_sap.txt" | tail -n +2 > /usr/sap/sapservices
test -n "$(cat /usr/sap/sapservices)" ; add_temp_manifest 'sapservices'

# Extract saphostexec -version for disp+work (replacement).
rm -f /tmp/saphostexec_version
sed -n '/^# \/usr\/sap\/hostctrl\/exe\/saphostexec -version/,/^#==/p' "${supportconfig_dir}/plugin-ha_sap.txt" | grep -v '^#' > /tmp/saphostexec_version
test -n "$(cat /tmp/saphostexec_version)" ; add_temp_manifest 'disp+work'

# Extract saphostctrl -function outputs.
rm -f /tmp/saphostctrl_listinstances /tmp/saphostctrl_ping
sed -n '/^# \/usr\/sap\/hostctrl\/exe\/saphostctrl -function ListInstances$/,/^#==/p' "${supportconfig_dir}/plugin-ha_sap.txt" | grep -v '^#' > /tmp/saphostctrl_listinstances
sed -n '/^# \/usr\/sap\/hostctrl\/exe\/saphostctrl -function Ping$/,/^#==/p' "${supportconfig_dir}/plugin-ha_sap.txt" | grep -v '^#' > /tmp/saphostctrl_ping
test -n "$(cat /tmp/saphostctrl_*)" ; add_temp_manifest 'saphostctrl'

# Extract sysctl output.
rm -f /tmp/sysctl
sed -n '/^# \/sbin\/sysctl -a$/,/^#==/p' "${supportconfig_dir}/env.txt" | grep -v '^#' | grep -v '^$' > /tmp/sysctl
test -n "$(cat /tmp/sysctl)" ; add_temp_manifest 'sysctl'

# Create sbd dumps.
rm -f /tmp/sbd_dumps
sed -n '/==Dumping header on disk/,/==Header on disk/p' "${supportconfig_dir}/ha.txt" > /tmp/sbd_dumps ; add_temp_manifest 'sbd_dumps'

# Write files for check 972BE0
rm -f  /tmp/file_lst
sed -n '/^# \/bin\/ls -alR \/etc\/systemd\/$/,/^#==/p' "${supportconfig_dir}/systemd.txt" | grep -v -e '^#' > /tmp/file_lst
sc/mkfiles.py /tmp/file_lst ; add_temp_manifest 'multi-user.target.wants'

# Copy prepared scripts.
cp /sc/cibadmin /sc/sbd /sc/saptune /sc/disp+work /sc/sysctl /bin/
mkdir -p /usr/sap/hostctrl/exe/
cp /sc/saphostctrl /usr/sap/hostctrl/exe/

if [ -e "${supportconfig_dir}/rpm.txt" ] ; then 

    # Setup RPM build tree.
    rpmdev-setuptree

    # Build RPM packages.
    for package in pacemaker corosync python3 SAPHanaSR sbd supportutils-plugin-ha-sap sap_suse_cluster_connector SLES_SAP-release saptune systemd patterns-sap-nw resource-agents; do 
        entry=$(grep -e "^${package}[[:space:]]"  "${supportconfig_dir}/rpm.txt" | tr -s ' ')
        [[ -z "${entry}" ]] && continue

        name="${entry%% *}"
        version_release="${entry##* }"
        version="${version_release%-*}"
        release="${version_release#*-}"

        cat << EOF > "/root/rpmbuild/SPECS/${name}.spec"
Name:           ${name}
Version:        ${version}
Release:        ${release}
Summary:        Dummy package for trento_checks_for_supportconfig proof-of-value.

License:        GPL

%description
Dummy package for trento_checks_for_supportconfig proof-of-value.

%files
EOF

        rpmbuild -bb "/root/rpmbuild/SPECS/${name}.spec"

    done

    # Install freshly build packages.
    while read package ; do
        echo "Install: ${package}"
        rpm -i --force "${package}"
    done < <(find /root/rpmbuild/RPMS/ -name '*.rpm')

    true ; add_temp_manifest 'rpm_packages'

fi

# Publish manifest.
publish_manifest
