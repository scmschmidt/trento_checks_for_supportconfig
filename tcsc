#!/usr/bin/env python3.10
# -*- coding: utf-8 -*-

"""
... TBD ...

Exit Codes:
-----------
    0   Everything went fine.
    1   Exception occurred accessing or parsing the configuration file.
    2   Exception occurred in communicating with Docker.
    3   Exception occurred in communicating with Wanda.
    4   A problem with Wanda ocurred.
    5   A problem with a host container ocurred.
    9   An unknown error ocurred.
   10   Feature not yet implemented.


ToDo:
-----
    - Think about labels and stuff and what really needs to be in the config file.
    - Check if all created docker resources really get removed.
    - Rework help output.
    - Implement JSON output
    - Implement signal handling (catching interrupts)
    - Better table output with flexible column width.
    
    
Future:
-------
    - Implement container creation, update and destruction as well.

    
Changelog:
----------
01.03.2024      v0.0        - and so it begins...
"""

import argparse
import os
import docker
import random
import string
import sys
from collections import Counter
from rabbiteer import Rabbiteer
from typing import List, Dict, Tuple
from tcsc_config import *
from tcsc_cli import *
from tcsc_wanda import *
from tcsc_hosts import *


__version__ = '0.0'
__author__ = 'SÃ¶ren Schmidt'
__email__ = 'soren.schmidt@suse.com'
__maintainer__ = __author__
__license__ = "GPLv3"
__status__ = 'Prototype'


def argument_parse() -> dict:
    """Evaluates the command line arguments."""

    parser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]),
                                     #usage='\n'.join(usage),
                                     description='Manages containers to use Wanda checks on support files.',
                                     epilog='')

    parser.add_argument('-j', '--json',
                        dest='json_output',
                        action='store_true',
                        required=False,
                        help='output is done in JSON')  
     
    selectors = parser.add_subparsers(dest='selectors')
    selectors.required = True
    
    # Selector: wanda
    wanda = selectors.add_parser('wanda', help='Manages Wanda container stack.')
    wanda_commands = wanda.add_subparsers(dest='wanda_commands')
    wanda_commands.required = True
    
    wanda_start = wanda_commands.add_parser('start', help='Starts Wanda containers.')
    wanda_status = wanda_commands.add_parser('status', help='Prints status of Wanda.')
    wanda_stop = wanda_commands.add_parser('stop', help='Stops Wanda containers.')
    wanda_checks = wanda_commands.add_parser('checks', help='Lists available checks.')
    
    wanda_checks.add_argument('-d', '--details',
                              dest='check_details',
                              action='store_true',
                              required=False,
                              help='shows more details.')  

    # Selector: hosts
    hosts = selectors.add_parser('hosts', help='Manages host containers')
    hosts_commands = hosts.add_subparsers(dest='host_commands')
    hosts_commands.required = True
 
    hosts_start = hosts_commands.add_parser('start', help='Starts host container.')
    hosts_status = hosts_commands.add_parser('status', help='Prints status of host containers.')
    hosts_stop = hosts_commands.add_parser('stop', help='Stops and removes host containers.')
    hosts_logs = hosts_commands.add_parser('logs', help='Lists logs of a host container.')
    
    hosts_start.add_argument(metavar='GROUPNAME',
                             dest='hostgroup',
                             help='name of the host group')
    hosts_start.add_argument(metavar='SUPPORTFILE',
                             dest='supportfiles',
                             nargs='+',
                             help='supportfiles (like supportconfig)')
 
    hosts_status.add_argument('-d', '--details',
                              dest='host_details',
                              action='store_true',
                              required=False,
                              help='shows more details.')  
        
    for p in  hosts_status, hosts_stop:
        p.add_argument(metavar='GROUPNAME',
                              nargs='?',
                              dest='hostgroup',
                              help='name of the host group')
    
    hosts_logs.add_argument(metavar='CONTAINERNAME',
                             dest='containername',
                             help='name of the host container')    
    hosts_logs.add_argument('-l', '--lines',
                              metavar='N',
                              dest='last_lines',
                              type=int,
                              required=False,
                              help='show only the last N lines')  
        
    
    # Selector: checks
    parser_checks = selectors.add_parser('checks',  help='Executes checks')
     
    args_parsed = parser.parse_args()
    
    #TODO: Checking lines (hosts logs) should be a positive integer.
    
    return args_parsed


def wanda_start(wanda: WandaStack) -> bool:
    """Starts the Wanda stack and returns the success."""

    try:
        started = wanda.start()   
    except WandaException as err:
        CLI.print_fail(err)
        return False
    else:
        if started:
            CLI.print_info(f'''Started containers: {', '.join(started)}''')
        CLI.print_ok('Wanda completely started.')
    return True
 
        
def wanda_stop(wanda: WandaStack) -> bool:
    """Stops the Wanda stack and returns the success."""

    try:
        stopped = wanda.stop()
    except WandaException as err:
        CLI.print_fail(err)
        return False
    else:
        if stopped:
            CLI.print_info(f'''Stopped containers: {', '.join(stopped)}''')
        CLI.print_ok('Wanda completely stopped.')
    return True


def wanda_status(wanda: WandaStack) -> bool:
    """Prints the status of Wanda stack on screen
    and returns operational state."""

    for name, status in wanda.container_status.items():
        CLI.print_status(f'{name:<20}', f'[{status}]', status = 0 if status == 'running' else 2)

    if wanda.status:
        CLI.print_ok('\nWanda is operational.') 
        return True
    else:
        CLI.print_fail('\nWanda is not operational!')
        return False


def wanda_checks(wanda: WandaStack, details: bool = False) -> None:
    """Prints the checks on screen returned by Wanda."""

    c = 0
    if details:
        for check in wanda.filter_checks(['id', 'description', 'group', 'metadata.provider']):
            c += 1    
            for attribute in 'id', 'description', 'group', 'metadata.provider':
                print(f'{attribute:<18}: {check[attribute]}'.strip())
            print()
    else:        
        for check in wanda.filter_checks(['id', 'description']):
            c += 1
            print(f'''{check['id']} - {check['description'].strip()}''')
        print()
    CLI.print_info(f'{c} checks available.')


def hosts_start(hosts: HostsStack, hostgroup: str, supportfiles: List[str]) -> bool:
    """Starts a host container with the given supportfiles as member of the given host group."""

    hostname = hosts.start(hostgroup, supportfiles)
    if hostname:
        CLI.print_ok(F'Host container "{hostname}" for "{hostgroup} started!')
        return True        
    CLI.print_fail(F'Could not start host container for "{hostgroup}!')
    return False


def hosts_status(hosts: HostsStack, hostgroup: str, details: bool = False) -> bool:
    """Prints the status of the host containers for all/requested host groups on screen
    and returns operational state."""
    
    indent: str = '\n\t'
    CLI.print_info('Host Container')
    operable_hostgroup: Dict[str, bool] = {}
    for host in hosts.filter_containers(filter={'hostgroup': hostgroup}, sortkey='hostgroup'):
        if host['hostgroup'] not in operable_hostgroup:
            operable_hostgroup[host['hostgroup']] = True
        if host['status'] != 'running':
            operable_hostgroup[host['hostgroup']] = False    
            
        if details:            
            CLI.print_status(f'''{host['name']:<65}''', f'''[{host['status']}]''', 
                            status = 0 if host['status'] == 'running' else 2)
            CLI.print_details(f'''    agent_id:      {host['agent_id']}''')
            CLI.print_details(f'''    hostgroup:     {host['hostgroup']}''')
            CLI.print_details(f'''    supportconfig: {host['supportconfig']}''')            
            CLI.print_details(f'''    supportfiles:  {indent.join(host['supportfiles'].split())}''')
            print()
        else:
            CLI.print_status(f'''{host['name']:<35}''', f'''[{host['status']}]''', 
                            status = 0 if host['status'] == 'running' else 2)
    
    CLI.print_info('\nHost Groups')
    for hostgroup, operational in operable_hostgroup.items():
        CLI.print_status(f'{hostgroup:<15}', '[ operable ]' if operational else '[inoperable]', status = 0 if operational else 2)
        
    return False if False in operable_hostgroup.values() else True
        

def hosts_stop(hosts: HostsStack, hostgroup: str) -> bool:
    """Stops host containers of a given hostgroup."""

    if hostgroup:
        if hostgroup not in hosts.hostgroups:
            CLI.print_fail(f'Host group "{hostgroup}" does not exist!.')
            return False
        hostgroups = [hostgroup]
    else:
        hostgroups = hosts.hostgroups

    success = True
    for hostgroup in hostgroups:
        stop_msg = f'Host group "{hostgroup}" completely stopped.' if hostgroup else 'All host groups completely stopped.'
        try:
            stopped = hosts.stop_hostgroup(hostgroup)
        except HostsException as err:
            CLI.print_fail(err)
            success = False
        else:
            if stopped:
                CLI.print_info(f'''Stopped containers: {', '.join(stopped)}''')
            CLI.print_ok(stop_msg)
    
    return success


def hosts_remove(hosts: HostsStack, hostgroup: str) -> bool:
    """Removes host containers of a given hostgroup."""

    if hostgroup:
        if hostgroup not in hosts.hostgroups:
            CLI.print_fail(f'Host group "{hostgroup}" does not exist!.')
            return False
        hostgroups = [hostgroup]
    else:
        hostgroups = hosts.hostgroups

    success = True
    for hostgroup in hostgroups:
        stop_msg = f'Host group "{hostgroup}" completely removed.' if hostgroup else 'All host groups completely removed.'
        try:
            removed = hosts.remove_hostgroup(hostgroup)
        except HostsException as err:
            CLI.print_fail(err)
            success = False
        else:
            if removed:
                CLI.print_info(f'''Removed containers: {', '.join(removed)}''')
            CLI.print_ok(stop_msg)
    
    return success


def hosts_logs(hosts: HostsStack, containername: str, last_lines: int) -> None:
    """Prints logs of given container."""
    
    CLI.print_info(f'Logs for "{containername}":')
    if last_lines:
        print('\n'.join(hosts.logs(containername)[-last_lines:]))
    else:
        print('\n'.join(hosts.logs(containername)))
        

def main() -> None:
        
    arguments = argument_parse()  
    
    try:
        config = Config('~/.config/tcsc/config')
        wanda = WandaStack(config)

        # print(arguments)
        if arguments.selectors == 'wanda':
            
            # tcsc wanda start
            if arguments.wanda_commands == 'start':
                sys.exit(0) if wanda_start(wanda) else sys.exit(4)

            # tcsc wanda stop                
            elif arguments.wanda_commands == 'stop':
                sys.exit(0) if wanda_stop(wanda) else sys.exit(4)
            
            # tcsc wanda status
            elif arguments.wanda_commands == 'status':
                sys.exit(0) if wanda_status(wanda) else sys.exit(4)
                
            # tcsc wanda checks [-d|--details]
            elif arguments.wanda_commands == 'checks':
                wanda_checks(wanda, arguments.check_details)
                sys.exit(0)           
        
        elif arguments.selectors == 'hosts': 
            
            if not wanda.status:
                CLI.print_fail('Wanda is not operational!') 
                sys.exit(4)
            hosts = HostsStack(config)
            
            # tcsc hosts start GROUPNAME SUPPORTFILE [SUPPORTFILE...]
            if arguments.host_commands == 'start':
                sys.exit(0) if hosts_start(hosts, arguments.hostgroup, arguments.supportfiles) else sys.exit(5)
                
            # tcsc hosts status [GROUPNAME]
            elif arguments.host_commands == 'status':
                sys.exit(0) if hosts_status(hosts, arguments.hostgroup, arguments.host_details) else sys.exit(5)
                
            # tcsc hosts stop [GROUPNAME]
            elif arguments.host_commands == 'stop':  #TODO: DO WE REMOVE CONTAINER OR DO WE LEAVE THEM TO START AGAIN (EVERTHING IS IN LABLES)??????
                    if hosts_stop(hosts, arguments.hostgroup):
                        print()
                        sys.exit(0) if hosts_remove(hosts, arguments.hostgroup) else sys.exit(5)
                    else:
                        sys.exit(5)
                        
            # tcsc hosts logs [-l LINES] CONTAINERNAME 
            elif arguments.host_commands == 'logs':
                hosts_logs(hosts, arguments.containername, arguments.last_lines)
                sys.exit(0) 
        
        elif arguments.selectors == 'checks': 
            CLI.print_fail('Not yet implemented!')
            sys.exit(10)
    
    except ConfigException as err:
        print(err, file=sys.stderr)
        sys.exit(1)
    except docker.errors.DockerException as err:
        print(f'Docker error: {err}', file=sys.stderr)
        sys.exit(2)
    except WandaException as err:
        print(f'Wanda error: {err}', file=sys.stderr)
        sys.exit(3)
    except HostsException as err:
        print(f'Hosts error: {err}', file=sys.stderr)
        sys.exit(5)
    
    # Bye.
    CLI.print_fail('An unknown error ocurred!')
    sys.exit(9)

    
if __name__ == '__main__':
    main()