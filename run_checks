#!/usr/bin/bash

wanda_url='http://localhost:4000'
checks_file='.valid_checks'


# === FUCTIONS ===

function print_bold() {
    echo -e "\e[1m${@}\e[0m"
}
 
function print_dim() {
    echo -e "\e[2m${@}\e[0m"
}

function print_skip() {
    echo -e "  \e[33m[SKIP]\e[0m  ${@}"
}

function print_pass() {
    echo -e "  \e[92m[PASS]\e[0m  ${@}"
}

function print_fail() {
    echo -e "  \e[91m[FAIL]\e[0m  ${@}"
}

function print_err() {
    echo -e "  \e[91m[ERROR]\e[0m ${@}"
}

# === MAIN ===

# Check arguments.
if [ ${#} -lt 3 ] ; then
    echo "Usage: ${0} PROVIDER CATEGORY|all TYPE:all [CHECK...]" >&2
    exit 1
fi 
provider=${1}
category=${2}
type=${3}

# Load valid checks
valid_checks=

# Get trento ids for running supportconfig containers.
declare -A containers
while IFS=: read name agent_id ; do
    docker ps -f "name=${name}" --format '{{.Names}}'
    #if [ ! -z $(docker ps -f "name=${name}" --format '{{.Names}}') ] ; then 
        containers["${agent_id}"]="${name}"
    #fi
done < <(grep '^[^ #]' .container_def | cut -d ':' -f 1,3)

# # No containers, no checking.
# if [ ${#containers[*]} -eq 0 ] ; then
#     echo "No supportconfig container is running. Terminating." >&2
#     exit 1 
# fi 

# We can terminate if only multi checks are wanted, but we have only one container.
if [ "${type}" == 'multi' -a ${#containers[*]} -eq 1 ] ; then
    echo "Only one supportconfig container is running, which is not sufficient for type \"multi\". Terminating." >&2
    exit 1 
fi 

# Run checks.
while read line ; do

    # Split line into components.
    line="${line%% *}"  
    IFS=: read -r check_id check_type check_category <<< "${line}"

    print_bold "\n${check_id}:"

    # Skip not matching categories and types.
    if [ "${type}" != 'all' ] ; then 
        if [ "${type}" != "${check_type}" ] ; then
            print_skip "Skipping check ${check_id}. Type \"${check_type}\" instead of \"${type}\"."
            continue
        fi
    fi
    if [ "${category}" != 'all' ] ; then 
        if [ "${category}" != "${check_category}" ] ; then
            print_skip "Skipping check ${check_id}. Category \"${check_category}\" instead of \"${category}\"."
            continue
        fi
    fi  

    # Single checks must be run on each container separately, multi checks on all containers simultaneously.
    case "${check_type}" in
        single)
            for agent_id in ${!containers[*]} ; do  
                output=$(./rabbiteer.py -r "${wanda_url}" ExecuteCheck  --timeout 5 -p "${provider}" -t "${agent_id}" -c "${check_id}")

                if [ $? -ne 0 ] ; then 
                    print_err "rabbiteer: ${output}" 
                    continue
                fi 

                result=$(jq -r .result <<< "${output}")
                message=$(jq -r .check_results[].agents_check_results[].facts[].message  <<< "${output}")
                case "${result}" in 
                    passing)
                        print_pass "${containers[${agent_id}]}"
                        ;;
                    critical)
                        print_fail "${containers[${agent_id}]}: ${message}"

                        # ADD REMIDIATION!!
                        ;;
                    *)
                        print_fail "${containers[${agent_id}]} [${result}]: ${message}"
                        ;;
                    esac 
                #jq <<< "${output}"
            done
            ;;
        multi)
            id_opts=''
            for agent_id in ${!containers[*]} ; do  
                id_opts="-t ${agent_id} ${id_opts}"
            done
            echo "|${id_opts}|"
            output=$(./rabbiteer.py -r "${wanda_url}" ExecuteCheck  --timeout 5 -p "${provider}" ${id_opts} -c "${check}")
            echo $output
            ;;
    esac 

    



    # # Execute check and retireve output (JSON).
    # output=$(./rabbiteer.py -r  "${wanda_url}" ExecuteCheck -p "${provider}" -t "${machine_id}" -c "${check}")

    # # Extract data.
    # result=$(jq -r .result <<< "${output}")
    # #message=$(jq -r .check_results[0].agents_check_results[0].facts[0].message  <<< "${output}")
    # message=$(jq -r .check_results[].agents_check_results[].facts[].message  <<< "${output}")


    # echo ${result} ${message}

done < <(grep '^[0-9A-F]' "${checks_file}" | cut -d ':' -f 1-3)


